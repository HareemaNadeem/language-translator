import nltk
import spacy
from nltk.tokenize import word_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load spaCy model
nlp = spacy.load("en_core_web_sm")

# Define FAQs
dataset = {
    "What is your name?": "I am an FAQ chatbot.",
    "How do you work?": "I use NLP techniques to understand and answer questions.",
    "What is NLP?": "NLP stands for Natural Language Processing, a field of AI that helps computers understand human language.",
    "How can I contact support?": "You can contact support via email at support@example.com."
}

questions = list(dataset.keys())
answers = list(dataset.values())

# Preprocess questions
def preprocess(text):
    doc = nlp(text.lower())
    return " ".join([token.lemma_ for token in doc if not token.is_stop and token.is_alpha])

preprocessed_questions = [preprocess(q) for q in questions]

# Vectorize questions
vectorizer = TfidfVectorizer()
question_vectors = vectorizer.fit_transform(preprocessed_questions)

def get_response(user_input):
    user_input_processed = preprocess(user_input)
    user_vector = vectorizer.transform([user_input_processed])
    similarities = cosine_similarity(user_vector, question_vectors).flatten()
    best_match_idx = similarities.argmax()
    if similarities[best_match_idx] > 0.2:  # Threshold for similarity
        return answers[best_match_idx]
    return "Sorry, I don't understand that question."

# Run chatbot
print("FAQ Chatbot: Type 'exit' to quit")
while True:
    user_input = input("You: ")
    if user_input.lower() == "exit":
        print("Chatbot: Goodbye!")
        break
    response = get_response(user_input)
    print("Chatbot:", response)
